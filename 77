package com.hui;

import org.apache.poi.POIDocument;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFFormulaEvaluator;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.joda.time.DateTime;
import org.junit.Test;

import java.io.*;
import java.util.Date;

public class ExcelReadTest {

    String PATH = "E:/我的学习/java/java代码/swagger/";

    @Test
    public void testRead03() throws IOException {
        // 获取文件流
        FileInputStream fileInputStream = new FileInputStream(PATH+"刘雨昕直播观众总计表03.xls");

        // 1、得到一个工作簿。使用excel能操作的这边他都可以操作
        Workbook workbook = new HSSFWorkbook(fileInputStream);
        Sheet sheet = workbook.getSheetAt(0);
        Row row = sheet.getRow(0);
        Cell cell = row.getCell(1);
        System.out.println(cell.getStringCellValue());
    }


    @Test
    public void testWrite07() throws IOException {
        // 获取文件流
        FileInputStream fileInputStream = new FileInputStream(PATH+"刘雨昕直播观众总计表07.xlsx");

        // 1、得到一个工作簿。使用excel能操作的这边他都可以操作
        Workbook workbook = new XSSFWorkbook(fileInputStream);
        Sheet sheet = workbook.getSheetAt(0);
        Row row = sheet.getRow(0);
        Cell cell = row.getCell(1);
        System.out.println(cell.getStringCellValue());

    }


    //不同格式
    @Test
    public void testCellType() throws IOException {
        FileInputStream fileInputStream = new FileInputStream(PATH+"明细表.xls");

        Workbook workbook = new HSSFWorkbook(fileInputStream);
        Sheet sheet = workbook.getSheetAt(0);

        //获得表头
        Row rowTitle = sheet.getRow(0);
        if (rowTitle != null) {

            //获得这一行有几个单元格
            int cellCount = rowTitle.getPhysicalNumberOfCells();
            for (int cellNum = 0; cellNum < cellCount ; cellNum++) {
                Cell cell = rowTitle.getCell(cellNum);
                if (cell != null) {
                    int cellType = cell.getCellType();
                    String stringCellValue = cell.getStringCellValue();
                    System.out.print(stringCellValue + "|");
                }

            }
            System.out.println();
        }

        //获取表中的内容
        int rowCount = sheet.getPhysicalNumberOfRows();
        for (int rowNum = 1; rowNum < rowCount; rowNum++) {
            //获得除表头的数据行对象
            Row rowData = sheet.getRow(rowNum);
            if (rowData != null) {
                //读取列
                int cellCount = rowData.getPhysicalNumberOfCells();
                for (int cellNum = 0; cellNum < cellCount ; cellNum++) {
                    System.out.print("[" + (rowNum + 1) + "-" + (cellNum + 1) + "]");

                    Cell cell = rowData.getCell(cellNum);
                    if (cell != null) {
                        int cellType = cell.getCellType();
                        String cellValue = "";

                        switch (cellType) {
                            case HSSFCell.CELL_TYPE_NUMERIC: //0 数字 （日期，普通数字）
                                System.out.print("【NUMERIC】");
                                if (HSSFDateUtil.isCellDateFormatted(cell)) {
                                    //是日期
                                    System.out.print("【日期】");
                                    Date date = cell.getDateCellValue();
                                    String dateTime = new DateTime(date).toString();
                                    cellValue = dateTime;
                                } else {
                                    //转换为字符串后输出,防止数字过长
                                    System.out.print("【转为数字输出】");
                                    cell.setCellType(HSSFCell.CELL_TYPE_STRING);
                                    cellValue = cell.toString();
                                }

                                break;
                            case HSSFCell.CELL_TYPE_STRING: //1 字符串
                                System.out.print("【STRING】");
                                cellValue = cell.getStringCellValue();
                                break;
                            case HSSFCell.CELL_TYPE_FORMULA: //2 公式
                                System.out.print("【FORMULA】");
                                break;
                            case HSSFCell.CELL_TYPE_BLANK:// 3 空
                                System.out.print("【BLANK】");
                                break;
                            case HSSFCell.CELL_TYPE_BOOLEAN://4 布尔
                                System.out.print("【BOOLEAN】");
                                cellValue = String.valueOf(cell.getBooleanCellValue());
                                break;
                            case HSSFCell.CELL_TYPE_ERROR://5 错误
                                System.out.print("【ERROR】");
                                break;
                        }
                        System.out.print(cellValue);
                    }
                    System.out.println();

                }
            }

        }
        fileInputStream.close();

    }




    @Test
    public void testFormula() throws IOException {
        // 获取文件流
        FileInputStream fileInputStream = new FileInputStream(PATH+"公式.xls");

        // 1、得到一个工作簿。使用excel能操作的这边他都可以操作
        HSSFWorkbook workbook = new HSSFWorkbook(fileInputStream);
        Sheet sheet = workbook.getSheetAt(0);

        Row row = sheet.getRow(4);
        Cell cell = row.getCell(0);

        // 拿到计算公式
        FormulaEvaluator fFormulaEvaluator = new HSSFFormulaEvaluator(workbook);

        // 输出单元格的内容
        int cellType = cell.getCellType();
        switch (cellType){
            case HSSFCell.CELL_TYPE_FORMULA:
                //公式
                String cellFormula = cell.getCellFormula();
                System.out.println(cellFormula);

                //按公式计算出来的值
                CellValue evaluate = fFormulaEvaluator.evaluate(cell);
                String cellValue = evaluate.formatAsString();
                System.out.println(cellValue);
                break;
        }
    }


}
