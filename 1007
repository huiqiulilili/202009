package com.hui;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.hui.mapper.UserMapper;
import com.hui.pojo.User;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.sql.Wrapper;
import java.util.List;
import java.util.Map;

@SpringBootTest
public class WrapperTest {

    @Autowired
    private UserMapper userMapper;

    @Test
    public void test1() {
        // 查询name 不为空的用户，并且邮箱不为空并且年龄大于等于12的用户
        QueryWrapper<User> wrapper = new QueryWrapper<>();
        wrapper.isNotNull("name")
                .isNotNull("email")
                .ge("age",12);
        List<User> userList = userMapper.selectList(wrapper);// 和我们刚才学习的map类比
        userList.forEach(System.out::println);
    }

    @Test
    public void test2() {
        // 查询name 为 刘雨昕
        QueryWrapper<User> wrapper = new QueryWrapper<>();
        wrapper.eq("name","刘雨昕22");
        System.out.println(userMapper.selectOne(wrapper));

    }

    @Test
    public void test3() {
        // 查询age在 20~30之间的用户
        QueryWrapper<User> wrapper = new QueryWrapper<>();
        wrapper.between("age",20,30);// 区间
        System.out.println(userMapper.selectCount(wrapper));

    }


    // 模糊查询
    @Test
    public void test4() {
        QueryWrapper<User> wrapper = new QueryWrapper<>();
        // 左：%e
        // 右：e%
        wrapper.notLike("name","T")
                .likeRight("name","l");
        List<Map<String,Object>> maps = userMapper.selectMaps(wrapper);
        maps.forEach(System.out::println);

    }

    @Test
    public void test5() {
        QueryWrapper<User> wrapper = new QueryWrapper<>();

        // id 在子查询里面查出来
        wrapper.inSql("id","select id from user where id < 3");

        List<Object> objects = userMapper.selectObjs(wrapper);
        objects.forEach(System.out::println);

    }

    @Test
    public void test6() {
        QueryWrapper<User> wrapper = new QueryWrapper<>();
        // 通过id 进行排序
        wrapper.orderByAsc("id");
        List<User> userList = userMapper.selectList(wrapper);
        userList.forEach(System.out::println);

    }
}
