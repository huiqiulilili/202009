package lesson01;

import org.junit.Test;

import java.util.Arrays;

public class MyTest {
    // 直接插入排序
    // tmp是需要排序的元素
    // [0,j - 1]是已经排序好的元素，每一次用tmp和之前排序好的区间[0,j - 1]，从后往前比较，
    // 如果tmp小，则让arr[j -1]放入到arr[j]的位置，
    // 如果tmp大，则比较结束，开始下一轮的排序
    @Test
    public void test() {
        int[] arr = {49,38,65,97,76,13,27,49};
        int len = arr.length;
        for (int i = 1; i < len ; i++) {
            int tmp = arr[i];
            int j = i - 1;
            for (; j >= 0 ; j--) {
                if(tmp < arr[j]) {
                    arr[j+1] = arr[j];
                }else {
                    break;
                }
            }
            arr[j + 1] = tmp;
        }
        System.out.println(Arrays.toString(arr));
    }

    //希尔排序
    @Test
    public void test2() {
        int[] array = {49,38,65,97,76,13,27,49};

        int jiange = 1;
        while (jiange <= array.length/3) {
            jiange = jiange * 3 + 1;
        }
        for(int h = jiange;h > 0;h = (h - 1) / 3) {
            for (int i = h; i < array.length; i++) {
                for(int j = i;j > h - 1;j -= h) {
                    if(array[j] < array[j - h]) {
                        swap(array,j,j- h);
                    }
                }
            }
        }
        System.out.println(Arrays.toString(array));
    }

    private void swap(int[] array, int j, int i) {
        int t = array[j];
        array[j] = array[i];
        array[i] = t;
    }

    // 快速排序
    @Test
    public void test3() {
        int[] array = {49,38,65,97,76,13,27,49};
        int left = 0;
        int right = array.length  -1;
        quickSort(array,left,right);
        System.out.println(Arrays.toString(array));
    }

    private void quickSort(int[] array, int left, int right) {
        if(left >= right) {
            return;
        }
        int index = search(array,left,right);
        quickSort(array,left,index - 1);
        quickSort(array,index+1,right);
    }

    private int search(int[] array, int left, int right) {
        int tmp = array[left];
        while(left < right) {
            while (left < right && array[right] >= tmp) {
                right--;
            }
            if(left < right) {
                array[left] = array[right];
            }
            while (left < right && array[left] <= tmp) {
                left++;
            }
            if(left < right) {
                array[right] = array[left];
            }
        }
        array[left] = tmp;
        return left;
    }

    // 选择排序
    @Test
    public void test4() {
        int[] arr = {49,38,65,97,76,13,27,49};
        for (int i = 0; i < arr.length ; i++) {
            for (int j = i+1; j < arr.length; j++) {
                if(arr[i] > arr[j]) {
                    swap(arr,i,j);
                }else {
                    continue;
                }
            }
        }
        System.out.println(Arrays.toString(arr));
    }

    // 冒泡排序
    @Test
    public void test5() {
        int[] arr = {49,38,65,97,76,13,27,49};
        for (int i = 0; i < arr.length - 1 ; i++) {
            boolean flsg = true;
            for (int j = 0; j < arr.length - i - 1; j++) {
                if(arr[j] > arr[j + 1]) {
                    swap(arr,j,j+1);
                    flsg = false;
                }
            }
            if(flsg) {
                break;
            }
        }
        System.out.println(Arrays.toString(arr));
    }


    // 归并排序
    @Test
    public void test6() {
        int[] arr = {49,38,65,97,76,13,27,49};
        chaifen(arr,0,arr.length - 1);
        System.out.println(Arrays.toString(arr));
    }

    private void chaifen(int[] array, int startIndex, int endIndex) {
        int centerIndex = (startIndex+endIndex)/2;
        if(startIndex < endIndex) {
            chaifen(array,startIndex,centerIndex);
            chaifen(array,centerIndex+1,endIndex);
            guibing(array,startIndex,centerIndex,endIndex);
        }
    }

    private void guibing(int[] array, int startIndex, int centerIndex, int endIndex) {
        int[] tempArray = new int[endIndex - startIndex +1];
        int i = startIndex;
        int j = centerIndex +1;
        int index = 0;

        while (i <= centerIndex && j <= endIndex) {
            if(array[i] <= array[j]) {
                tempArray[index++] = array[i++];
            }else {
                tempArray[index++] = array[j++];
            }
        }

        while (i <= centerIndex) {
            tempArray[index++] = array[i++];
        }
        while (j <= endIndex) {
            tempArray[index++] = array[j++];
        }

        for (int k = 0; k < tempArray.length; k++) {
            array[k + startIndex] = tempArray[k];
        }
    }
}
