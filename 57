package com.反射.demo03;

import java.io.ObjectInputStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class Demo01 {
    public static void main(String[] args) throws Exception {
        // 属性
        // 构造函数
        // 实例方法


        Class cl = Person.class;

        String name = cl.getName();
        System.out.println(name);

        /*
        Method method = cl.getDeclaredMethod("eat2",String.class);
        System.out.println(method);
        method.setAccessible(true);
        Person p = new Person();
        method.invoke(p,"饭");*/

        /*Constructor constructor =  cl.getConstructor(String.class,int.class);
        System.out.println(constructor);

        Object o =  constructor.newInstance("张三",18);
        System.out.println(o);*/

       /* Constructor constructor = cl.getDeclaredConstructor(String.class,int.class,String.class);
        System.out.println(constructor);
        constructor.setAccessible(true);
        Object o =  constructor.newInstance("张三",18,"男");
        System.out.println(o);*/

        /*Field[] fields =  cl.getDeclaredFields();
        for(Field field : fields) {
            System.out.println(field);
        }*/

        /*Field name = cl.getDeclaredField("name");
        System.out.println(name);

        Person p = new Person();
        name.setAccessible(true);
        name.set(p,"张三");
        System.out.println(p);*/

       /* Class name1 = Class.forName("com.反射.demo03.Person");
        System.out.println(name1);


        Class name2 = Person.class;
        System.out.println(name2);

        Person p = new Person();
        Class name3 = p.getClass();
        System.out.println(name3);*/
    }
}
