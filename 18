/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null) {
            return null;
        }

        Node cur = head;
        while(cur != null) {
            Node node = new Node(cur.val);
            node.next = cur.next;
            cur.next = node;
            cur = cur.next.next;
        }

        cur = head;
        while(cur != null) {
            if(cur.random != null) {
                cur.next.random =  cur.random.next;
            }else {
                cur.next.random = null;
            }
            cur = cur.next.next;
            
        }
        cur = head;
        Node newList = head.next;
        while(cur != null) {
            Node node = cur.next;
            cur.next = node.next;
            if(node.next != null) {
                node.next = node.next.next;
            }
            cur = cur.next;
        }
        return newList;

       /* if(head == null) {
            return null;
        }
        // 复制next
        Node cur = head;
        while(cur != null) {
            Node node = new Node(cur.val);
            node.next = cur.next;
            cur.next = node;
            cur = cur.next.next;
        }

        // 复制random
        cur = head;
        while(cur != null) {
            if(cur.random != null) {
                cur.next.random = cur.random.next;
            }else {
                cur.next.random = null;
            }
            cur = cur.next.next;
        }

        // 分开
        cur = head;
        Node newHead = head.next;
        while(cur != null) {
            Node node = cur.next;
            cur.next = node.next;
            if(node.next != null) {
                node.next = node.next.next;
            }
            cur = cur.next;
        }
        return newHead;*/













        // while(cur != null) {
        //     Node node = new Node(cur.val);
        //     node.next = cur.next;
        //     cur.next = node;
        //     cur = cur.next.next;   
        // }
        // // 复制random
        // cur = head;
        // while(cur != null) {
        //     if(cur.random != null) {
        //         cur.next.random = cur.random.next;
        //     }else {
        //         cur.next.random = null;
        //     }
        //     cur = cur.next.next;
        // }
        // // 分开
        // cur = head;
        // Node newHead = head.next;
        // while(cur != null) {
        //     Node node = cur.next;
        //     cur.next = node.next;
        //     if(node.next != null) {
        //         node.next = node.next.next;
        //     }
        //     cur = cur.next;
        // }
        // return newHead;
    }
}
