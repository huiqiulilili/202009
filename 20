package 树TreeNode;


import sun.reflect.generics.tree.Tree;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Test18 {
    public static TreeNode buildTreeArray(int[] inorder, int[] postorder) {
        if(inorder.length == 0) {
            return null;
        }
        int rootValue = inorder[0];
        TreeNode root = new TreeNode(rootValue);
        int leftCount = -1;
        for (int i = 0; i < inorder.length ; i++) {
            if(inorder[i] == rootValue) {
                leftCount = i;
            }
        }

        int[] leftinorder = Arrays.copyOfRange(inorder,0,leftCount);
        int[] leftpostorder = Arrays.copyOfRange(postorder,0,leftCount);
        int[] rightinorder = Arrays.copyOfRange(inorder,leftCount+1,inorder.length);
        int[] rightpostorder = Arrays.copyOfRange(postorder,leftCount,postorder.length - 1);

        root.left = buildTreeArray(leftinorder,leftpostorder);
        root.right = buildTreeArray(rightinorder,rightpostorder);
        return root;
    }
    public String tree2str(TreeNode t) {
        if(t == null) {
            return "";
        }
        StringBuffer sb = new StringBuffer();
        perder(sb,t);
        String r = sb.toString();

        return r.substring(1,r.length() - 1);
    }

    private void perder(StringBuffer sb, TreeNode root) {
        if (root == null) {
            return;
        }
        sb.append("(");
        sb.append(root.val);
        if(root.left == null && root.right != null) {
            sb.append("()");
        }else {
            perder(sb,root.left);
        }
        perder(sb,root.right);
        sb.append(")");
    }

    // 层序遍历
    public static void levelOrderTraversal(TreeNode root) {
        if (root == null) {
            return ;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        while(!queue.isEmpty()) {
            TreeNode front = queue.poll();
            System.out.println(front.val);

            if (front.left != null) {
                queue.add(front.left);
            }
            if (front.right != null) {
                queue.add(front.right);
            }
        }
    }
}
